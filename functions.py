# FUNCTIONS FOR WPFORMATTER - LENTH 12436
from win32com.client import Dispatch, constants


def doc2pdf(input, output):
    w = Dispatch("Word.Application")
    try:
        doc = w.Documents.Open(input, ReadOnly=1)
        doc.ExportAsFixedFormat(output, constants.wdExportFormatPDF,
                                Item=constants.wdExportDocumentWithMarkup,
                                CreateBookmarks=constants.wdExportCreateHeadingBookmarks)
        return 0
    except:
        return 1
    finally:
        w.Quit(constants.wdDoNotSaveChanges)


def exchange(src, dst, GenerateSupport, doc2pdf):
    GenerateSupport()
    rc = doc2pdf(src, dst)
    return rc


from win32com.client import gencache


# Generate all the support we can.
def GenerateSupport():
    # enable python COM support for Word 2007
    # this is generated by: makepy.py -i "Microsoft Word 12.0 Object Library"
    gencache.EnsureModule('{00020905-0000-0000-C000-000000000046}', 0, 8, 4)


from PySide2.QtWidgets import QMainWindow
import os
import tkinter.messagebox
import tkinter.filedialog
import win32gui
import sys


def main_window(Ui_EnglishWindow, ic, copy, exchange, GenerateSupport, doc2pdf):
    class MainWindow(Ui_EnglishWindow, QMainWindow):
        def __init__(self):
            QMainWindow.__init__(self, parent=None)
            self.setupUi(self)
            self.conn()
            self.pushButton.setEnabled(False)

        def back(self):
            self.destroy()

        def browse_src(self):
            path = tkinter.filedialog.askopenfilename()
            if path == '':
                return
            self.lineEdit_src_path.setText(path)

        def browse_dst(self):
            path = tkinter.filedialog.asksaveasfilename()
            if path == '':
                return
            self.lineEdit_dst_path.setText(path)

        def conn(self):
            self.pushButton_2.clicked.connect(sys.exit)
            self.pushButton.clicked.connect(self.back)
            self.pushButton_exchange.clicked.connect(self.exchange)
            self.pushButton_src_browse.clicked.connect(self.browse_src)
            self.pushButton_dst_browse.clicked.connect(self.browse_dst)

        def exchange(self):
            src, dst = self.lineEdit_src_path.text(), self.lineEdit_dst_path.text()
            if src is None or str(src).strip() == '':
                tkinter.messagebox.showwarning(title='源文件', message='请选择源文件.')
                return
            if dst is None or str(dst).strip() == '':
                tkinter.messagebox.showwarning(title='目标文件', message='请选择目标文件保存目录.')
                return
            if not os.path.isfile(src):
                tkinter.messagebox.showwarning(title='源文件', message='找不到文件: {}'.format(src))
                return
            if os.path.isfile(dst):
                ask = tkinter.messagebox.askyesno(title='覆盖文件', message='请注意: 已有文件在保存路径上. 如果继续转换, 新文件将覆盖之; \
                如果此文件正在被其它程序使用, 权限可能被拒绝. 继续?')
                if ask == tkinter.NO:
                    return
            if not os.path.exists(os.path.dirname(dst)):
                tkinter.messagebox.showwarning(title='目标文件', message='请选择有效的目标路径.')
                return
            ic.message(title='WPFormatter', message='开始转换文件.')
            try:
                src_type = self.comboBox_src_type.currentText()
                dst_type = self.comboBox_dst_type.currentText()
                if src_type == dst_type:
                    copy(src, dst)
                elif src_type == 'Office Word 文档 (.doc, .docx, .docm)':
                    exchange(os.path.abspath(src), os.path.abspath(dst), GenerateSupport, doc2pdf)
                else:
                    # pdf_word()
                    tkinter.messagebox.showwarning(title='WPFormatter', message='此版本暂不支持转换PDF为Word文档.')
            except PermissionError:
                tkinter.messagebox.showerror(title='WPFormatter', message='无法转换文件: 权限被拒绝.')
                ic.message(title='WPFormatter', message='无法转换文件: 权限被拒绝.', image=win32gui.NIIF_ERROR)
                return
            ic.message(title='WPFormatter', message='文件转换成功.')
            tkinter.messagebox.showinfo(title='WPFormatter', message='文件转换成功.')
            os.startfile(os.path.dirname(dst))

    return MainWindow


from concurrent.futures import ProcessPoolExecutor
from pdfminer.pdfinterp import PDFResourceManager
from pdfminer.pdfinterp import process_pdf
from pdfminer.converter import TextConverter
from pdfminer.layout import LAParams
from docx import Document
from io import StringIO


def read_from_pdf(file_path):
    with open(file_path, 'rb') as file:
        resource_manager = PDFResourceManager()
        return_str = StringIO()
        lap_params = LAParams()

        device = TextConverter(
            resource_manager, return_str, laparams=lap_params)
        process_pdf(resource_manager, device, file)
        device.close()

        content = return_str.getvalue()
        return_str.close()
        return content


def save_text_to_word(content, file_path):
    doc = Document()
    for line in content.split('\n'):
        paragraph = doc.add_paragraph()
        paragraph.add_run(remove_control_characters(line))
    doc.save(file_path)


def remove_control_characters(content):
    mpa = dict.fromkeys(range(32))
    return content.translate(mpa)


def pdf_word(pdf_file_path, word_file_path):
    content = read_from_pdf(pdf_file_path)
    save_text_to_word(content, word_file_path)


def main(sim_chinese):
    sim_chinese()


from PySide2.QtWidgets import QApplication
import sys


def app(MainWindow):
    application = QApplication(sys.argv)
    main = MainWindow()
    main.show()
    application.exec_()


def start(argv=None):
    pass


def word_pdf(src, dst, GenerateSupport, doc2pdf):
    GenerateSupport()
    doc2pdf(src, dst)


def copy(src, dst):
    f = open(src, 'rb')
    text = f.read()
    f.close()
    f = open(dst, 'wb')
    f.write(text)
    f.close()
    del text
    del f


import win32com.client


class WordDocument:

    def __init__(self, filepath, Debug=False):
        """
        :param filepath:
        """
        self.wordApp = win32com.client.Dispatch('word.Application')
        self.wordApp.Visible = Debug
        self.myDoc = self.wordApp.Documents.Open(filepath)

    def export_pdf(self, output_file_path):
        """
        Changing Word into PDF.
        :param output_file_path:
        :return:
        """
        self.myDoc.ExportAsFixedFormat(output_file_path, 17, Item=7, CreateBookmarks=0)


from PySide2.QtWidgets import *
from PySide2.QtCore import *
from PySide2.QtGui import *


class Ui_EnglishWindow(object):
    def setupUi(self, EnglishWindow):
        if not EnglishWindow.objectName():
            EnglishWindow.setObjectName(u"EnglishWindow")
        EnglishWindow.resize(680, 306)
        self.centralwidget = QWidget(EnglishWindow)
        self.centralwidget.setObjectName(u"centralwidget")
        self.groupBox_src = QGroupBox(self.centralwidget)
        self.groupBox_src.setObjectName(u"groupBox_src")
        self.groupBox_src.setGeometry(QRect(10, 10, 661, 91))
        self.label = QLabel(self.groupBox_src)
        self.label.setObjectName(u"label")
        self.label.setGeometry(QRect(10, 20, 71, 16))
        self.lineEdit_src_path = QLineEdit(self.groupBox_src)
        self.lineEdit_src_path.setObjectName(u"lineEdit_src_path")
        self.lineEdit_src_path.setGeometry(QRect(90, 20, 531, 20))
        self.pushButton_src_browse = QPushButton(self.groupBox_src)
        self.pushButton_src_browse.setObjectName(u"pushButton_src_browse")
        self.pushButton_src_browse.setGeometry(QRect(624, 20, 31, 23))
        icon = QIcon()
        icon.addFile(u"1.png", QSize(), QIcon.Normal, QIcon.Off)
        self.pushButton_src_browse.setIcon(icon)
        self.label_2 = QLabel(self.groupBox_src)
        self.label_2.setObjectName(u"label_2")
        self.label_2.setGeometry(QRect(10, 60, 121, 16))
        self.comboBox_src_type = QComboBox(self.groupBox_src)
        self.comboBox_src_type.addItem("")
        self.comboBox_src_type.addItem("")
        self.comboBox_src_type.setObjectName(u"comboBox_src_type")
        self.comboBox_src_type.setGeometry(QRect(90, 60, 561, 22))
        self.groupBox_dst = QGroupBox(self.centralwidget)
        self.groupBox_dst.setObjectName(u"groupBox_dst")
        self.groupBox_dst.setGeometry(QRect(10, 110, 661, 111))
        self.comboBox_dst_type = QComboBox(self.groupBox_dst)
        self.comboBox_dst_type.addItem("")
        self.comboBox_dst_type.addItem("")
        self.comboBox_dst_type.setObjectName(u"comboBox_dst_type")
        self.comboBox_dst_type.setEnabled(True)
        self.comboBox_dst_type.setGeometry(QRect(90, 60, 561, 22))
        self.label_3 = QLabel(self.groupBox_dst)
        self.label_3.setObjectName(u"label_3")
        self.label_3.setGeometry(QRect(10, 20, 81, 16))
        self.lineEdit_dst_path = QLineEdit(self.groupBox_dst)
        self.lineEdit_dst_path.setObjectName(u"lineEdit_dst_path")
        self.lineEdit_dst_path.setGeometry(QRect(90, 20, 531, 20))
        self.label_4 = QLabel(self.groupBox_dst)
        self.label_4.setObjectName(u"label_4")
        self.label_4.setGeometry(QRect(10, 60, 121, 16))
        self.pushButton_dst_browse = QPushButton(self.groupBox_dst)
        self.pushButton_dst_browse.setObjectName(u"pushButton_dst_browse")
        self.pushButton_dst_browse.setGeometry(QRect(620, 20, 31, 23))
        self.pushButton_dst_browse.setIcon(icon)
        self.pushButton_exchange = QPushButton(self.centralwidget)
        self.pushButton_exchange.setObjectName(u"pushButton_exchange")
        self.pushButton_exchange.setGeometry(QRect(574, 230, 91, 23))
        self.pushButton = QPushButton(self.centralwidget)
        self.pushButton.setObjectName(u"pushButton")
        self.pushButton.setGeometry(QRect(474, 230, 91, 23))
        self.pushButton_2 = QPushButton(self.centralwidget)
        self.pushButton_2.setObjectName(u"pushButton_2")
        self.pushButton_2.setGeometry(QRect(374, 230, 91, 23))
        EnglishWindow.setCentralWidget(self.centralwidget)
        self.menubar = QMenuBar(EnglishWindow)
        self.menubar.setObjectName(u"menubar")
        self.menubar.setGeometry(QRect(0, 0, 680, 23))
        EnglishWindow.setMenuBar(self.menubar)
        self.statusbar = QStatusBar(EnglishWindow)
        self.statusbar.setObjectName(u"statusbar")
        EnglishWindow.setStatusBar(self.statusbar)
        self.retranslateUi(EnglishWindow)
        QMetaObject.connectSlotsByName(EnglishWindow)
    # setupUi
    def retranslateUi(self, EnglishWindow):
        EnglishWindow.setWindowTitle(QCoreApplication.translate("EnglishWindow", u"WPFormatter 1.0 Community", None))
        self.groupBox_src.setTitle(QCoreApplication.translate("EnglishWindow", u"\u6e90\u6587\u4ef6", None))
        self.label.setText(QCoreApplication.translate("EnglishWindow", u"\u6e90\u6587\u4ef6\u8def\u5f84:", None))
        self.pushButton_src_browse.setText("")
        self.label_2.setText(QCoreApplication.translate("EnglishWindow", u"\u6e90\u6587\u4ef6\u7c7b\u578b:", None))
        self.comboBox_src_type.setItemText(0, QCoreApplication.translate("EnglishWindow", u"Office Word \u6587\u6863 (.doc, .docx, .docm)", None))
        self.comboBox_src_type.setItemText(1, QCoreApplication.translate("EnglishWindow", u"PDF \u6587\u6863 (.pdf)", None))
        self.groupBox_dst.setTitle(QCoreApplication.translate("EnglishWindow", u"\u76ee\u6807\u6587\u4ef6", None))
        self.comboBox_dst_type.setItemText(0, QCoreApplication.translate("EnglishWindow", u"PDF \u6587\u6863 (.pdf)", None))
        self.comboBox_dst_type.setItemText(1, QCoreApplication.translate("EnglishWindow", u"Office Word \u6587\u6863 (.doc, .docx, .docm)", None))
        self.label_3.setText(QCoreApplication.translate("EnglishWindow", u"\u76ee\u6807\u6587\u4ef6\u8def\u5f84:", None))
        self.label_4.setText(QCoreApplication.translate("EnglishWindow", u"\u76ee\u6807\u6587\u4ef6\u7c7b\u578b:", None))
        self.pushButton_dst_browse.setText("")
        self.pushButton_exchange.setText(QCoreApplication.translate("EnglishWindow", u"\u8f6c\u6362", None))
        self.pushButton.setText(QCoreApplication.translate("EnglishWindow", u"\u4e0a\u4e00\u6b65", None))
        self.pushButton_2.setText(QCoreApplication.translate("EnglishWindow", u"\u53d6\u6d88", None))
    # retranslateUi
