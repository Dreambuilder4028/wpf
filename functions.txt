#FUNCTIONS12410\\n
from win32com.client import Dispatch, constants\\n
\\n
\\n
def doc2pdf(input, output):\\n
    w = Dispatch("Word.Application")\\n
    try:\\n
        doc = w.Documents.Open(input, ReadOnly=1)\\n
        doc.ExportAsFixedFormat(output, constants.wdExportFormatPDF,\\n
                                Item=constants.wdExportDocumentWithMarkup,\\n
                                CreateBookmarks=constants.wdExportCreateHeadingBookmarks)\\n
        return 0\\n
    except:\\n
        return 1\\n
    finally:\\n
        w.Quit(constants.wdDoNotSaveChanges)\\n
\\n
\\n
def exchange(src, dst, GenerateSupport, doc2pdf):\\n
    GenerateSupport()\\n
    rc = doc2pdf(src, dst)\\n
    return rc\\n
\\n
\\n
from win32com.client import gencache\\n
\\n
\\n
# Generate all the support we can.\\n
def GenerateSupport():\\n
    # enable python COM support for Word 2007\\n
    # this is generated by: makepy.py -i "Microsoft Word 12.0 Object Library"\\n
    gencache.EnsureModule('{00020905-0000-0000-C000-000000000046}', 0, 8, 4)\\n
\\n
\\n
from PySide2.QtWidgets import QMainWindow\\n
import os\\n
import tkinter.messagebox\\n
import tkinter.filedialog\\n
import win32gui\\n
import sys\\n
\\n
\\n
def main_window(Ui_EnglishWindow, ic, copy, exchange, GenerateSupport, doc2pdf):\\n
    class MainWindow(Ui_EnglishWindow, QMainWindow):\\n
        def __init__(self):\\n
            QMainWindow.__init__(self, parent=None)\\n
            self.setupUi(self)\\n
            self.conn()\\n
            self.pushButton.setEnabled(False)\\n
\\n
        def back(self):\\n
            self.destroy()\\n
\\n
        def browse_src(self):\\n
            path = tkinter.filedialog.askopenfilename()\\n
            if path == '':\\n
                return\\n
            self.lineEdit_src_path.setText(path)\\n
\\n
        def browse_dst(self):\\n
            path = tkinter.filedialog.asksaveasfilename()\\n
            if path == '':\\n
                return\\n
            self.lineEdit_dst_path.setText(path)\\n
\\n
        def conn(self):\\n
            self.pushButton_2.clicked.connect(sys.exit)\\n
            self.pushButton.clicked.connect(self.back)\\n
            self.pushButton_exchange.clicked.connect(self.exchange)\\n
            self.pushButton_src_browse.clicked.connect(self.browse_src)\\n
            self.pushButton_dst_browse.clicked.connect(self.browse_dst)\\n
\\n
        def exchange(self):\\n
            src, dst = self.lineEdit_src_path.text(), self.lineEdit_dst_path.text()\\n
            if src is None or str(src).strip() == '':\\n
                tkinter.messagebox.showwarning(title='源文件', message='请选择源文件.')\\n
                return\\n
            if dst is None or str(dst).strip() == '':\\n
                tkinter.messagebox.showwarning(title='目标文件', message='请选择目标文件保存目录.')\\n
                return\\n
            if not os.path.isfile(src):\\n
                tkinter.messagebox.showwarning(title='源文件', message='找不到文件: {}'.format(src))\\n
                return\\n
            if os.path.isfile(dst):\\n
                ask = tkinter.messagebox.askyesno(title='覆盖文件', message='请注意: 已有文件在保存路径上. 如果继续转换, 新文件将覆盖之; \ \\n
                如果此文件正在被其它程序使用, 权限可能被拒绝. 继续?')\\n
                if ask == tkinter.NO:\\n
                    return\\n
            if not os.path.exists(os.path.dirname(dst)):\\n
                tkinter.messagebox.showwarning(title='目标文件', message='请选择有效的目标路径.')\\n
                return\\n
            ic.message(title='WPFormatter', message='开始转换文件.')\\n
            try:\\n
                src_type = self.comboBox_src_type.currentText()\\n
                dst_type = self.comboBox_dst_type.currentText()\\n
                if src_type == dst_type:\\n
                    copy(src, dst)\\n
                elif src_type == 'Office Word 文档 (.doc, .docx, .docm)':\\n
                    exchange(os.path.abspath(src), os.path.abspath(dst), GenerateSupport, doc2pdf)\\n
                else:\\n
                    # pdf_word()\\n
                    tkinter.messagebox.showwarning(title='WPFormatter', message='此版本暂不支持转换PDF为Word文档.')\\n
            except PermissionError:\\n
                tkinter.messagebox.showerror(title='WPFormatter', message='无法转换文件: 权限被拒绝.')\\n
                ic.message(title='WPFormatter', message='无法转换文件: 权限被拒绝.', image=win32gui.NIIF_ERROR)\\n
                return\\n
            ic.message(title='WPFormatter', message='文件转换成功.')\\n
            tkinter.messagebox.showinfo(title='WPFormatter', message='文件转换成功.')\\n
            os.startfile(os.path.dirname(dst))\\n
\\n
    return MainWindow\\n
\\n
\\n
from concurrent.futures import ProcessPoolExecutor\\n
from pdfminer.pdfinterp import PDFResourceManager\\n
from pdfminer.pdfinterp import process_pdf\\n
from pdfminer.converter import TextConverter\\n
from pdfminer.layout import LAParams\\n
from docx import Document\\n
from io import StringIO\\n
\\n
\\n
def read_from_pdf(file_path):\\n
    with open(file_path, 'rb') as file:\\n
        resource_manager = PDFResourceManager()\\n
        return_str = StringIO()\\n
        lap_params = LAParams()\\n
\\n
        device = TextConverter(\\n
            resource_manager, return_str, laparams=lap_params)\\n
        process_pdf(resource_manager, device, file)\\n
        device.close()\\n
\\n
        content = return_str.getvalue()\\n
        return_str.close()\\n
        return content\\n
\\n
\\n
def save_text_to_word(content, file_path):\\n
    doc = Document()\\n
    for line in content.split('\n'):\\n
        paragraph = doc.add_paragraph()\\n
        paragraph.add_run(remove_control_characters(line))\\n
    doc.save(file_path)\\n
\\n
\\n
def remove_control_characters(content):\\n
    mpa = dict.fromkeys(range(32))\\n
    return content.translate(mpa)\\n
\\n
\\n
def pdf_word(pdf_file_path, word_file_path):\\n
    content = read_from_pdf(pdf_file_path)\\n
    save_text_to_word(content, word_file_path)\\n
\\n
\\n
def main(sim_chinese):\\n
    sim_chinese()\\n
\\n
\\n
from PySide2.QtWidgets import QApplication\\n
import sys\\n
\\n
\\n
def app(MainWindow):\\n
    application = QApplication(sys.argv)\\n
    main = MainWindow()\\n
    main.show()\\n
    application.exec_()\\n
\\n
\\n
def start(argv=None):\\n
    pass\\n
\\n
\\n
def word_pdf(src, dst, GenerateSupport, doc2pdf):\\n
    GenerateSupport()\\n
    doc2pdf(src, dst)\\n
\\n
\\n
def copy(src, dst):\\n
    f = open(src, 'rb')\\n
    text = f.read()\\n
    f.close()\\n
    f = open(dst, 'wb')\\n
    f.write(text)\\n
    f.close()\\n
    del text\\n
    del f\\n
\\n
\\n
import win32com.client\\n
\\n
\\n
class WordDocument:\\n
\\n
    def __init__(self, filepath, Debug=False):\\n
        """\\n
        :param filepath:\\n
        """\\n
        self.wordApp = win32com.client.Dispatch('word.Application')\\n
        self.wordApp.Visible = Debug\\n
        self.myDoc = self.wordApp.Documents.Open(filepath)\\n
\\n
    def export_pdf(self, output_file_path):\\n
        """\\n
        Changing Word into PDF.\\n
        :param output_file_path:\\n
        :return:\\n
        """\\n
        self.myDoc.ExportAsFixedFormat(output_file_path, 17, Item=7, CreateBookmarks=0)\\n
\\n
\\n
from PySide2.QtWidgets import *\\n
from PySide2.QtCore import *\\n
from PySide2.QtGui import *\\n
\\n
\\n
class Ui_EnglishWindow(object):\\n
    def setupUi(self, EnglishWindow):\\n
        if not EnglishWindow.objectName():\\n
            EnglishWindow.setObjectName(u"EnglishWindow")\\n
        EnglishWindow.resize(680, 306)\\n
        self.centralwidget = QWidget(EnglishWindow)\\n
        self.centralwidget.setObjectName(u"centralwidget")\\n
        self.groupBox_src = QGroupBox(self.centralwidget)\\n
        self.groupBox_src.setObjectName(u"groupBox_src")\\n
        self.groupBox_src.setGeometry(QRect(10, 10, 661, 91))\\n
        self.label = QLabel(self.groupBox_src)\\n
        self.label.setObjectName(u"label")\\n
        self.label.setGeometry(QRect(10, 20, 71, 16))\\n
        self.lineEdit_src_path = QLineEdit(self.groupBox_src)\\n
        self.lineEdit_src_path.setObjectName(u"lineEdit_src_path")\\n
        self.lineEdit_src_path.setGeometry(QRect(90, 20, 531, 20))\\n
        self.pushButton_src_browse = QPushButton(self.groupBox_src)\\n
        self.pushButton_src_browse.setObjectName(u"pushButton_src_browse")\\n
        self.pushButton_src_browse.setGeometry(QRect(624, 20, 31, 23))\\n
        icon = QIcon()\\n
        icon.addFile(u"1.png", QSize(), QIcon.Normal, QIcon.Off)\\n
        self.pushButton_src_browse.setIcon(icon)\\n
        self.label_2 = QLabel(self.groupBox_src)\\n
        self.label_2.setObjectName(u"label_2")\\n
        self.label_2.setGeometry(QRect(10, 60, 121, 16))\\n
        self.comboBox_src_type = QComboBox(self.groupBox_src)\\n
        self.comboBox_src_type.addItem("")\\n
        self.comboBox_src_type.addItem("")\\n
        self.comboBox_src_type.setObjectName(u"comboBox_src_type")\\n
        self.comboBox_src_type.setGeometry(QRect(90, 60, 561, 22))
        self.groupBox_dst = QGroupBox(self.centralwidget)\\n
        self.groupBox_dst.setObjectName(u"groupBox_dst")\\n
        self.groupBox_dst.setGeometry(QRect(10, 110, 661, 111))\\n
        self.comboBox_dst_type = QComboBox(self.groupBox_dst)\\n
        self.comboBox_dst_type.addItem("")\\n
        self.comboBox_dst_type.addItem("")\\n
        self.comboBox_dst_type.setObjectName(u"comboBox_dst_type")\\n
        self.comboBox_dst_type.setEnabled(True)\\n
        self.comboBox_dst_type.setGeometry(QRect(90, 60, 561, 22))\\n
        self.label_3 = QLabel(self.groupBox_dst)\\n
        self.label_3.setObjectName(u"label_3")\\n
        self.label_3.setGeometry(QRect(10, 20, 81, 16))\\n
        self.lineEdit_dst_path = QLineEdit(self.groupBox_dst)\\n
        self.lineEdit_dst_path.setObjectName(u"lineEdit_dst_path")\\n
        self.lineEdit_dst_path.setGeometry(QRect(90, 20, 531, 20))\\n
        self.label_4 = QLabel(self.groupBox_dst)\\n
        self.label_4.setObjectName(u"label_4")\\n
        self.label_4.setGeometry(QRect(10, 60, 121, 16))\\n
        self.pushButton_dst_browse = QPushButton(self.groupBox_dst)\\n
        self.pushButton_dst_browse.setObjectName(u"pushButton_dst_browse")\\n
        self.pushButton_dst_browse.setGeometry(QRect(620, 20, 31, 23))\\n
        self.pushButton_dst_browse.setIcon(icon)\\n
        self.pushButton_exchange = QPushButton(self.centralwidget)\\n
        self.pushButton_exchange.setObjectName(u"pushButton_exchange")\\n
        self.pushButton_exchange.setGeometry(QRect(574, 230, 91, 23))\\n
        self.pushButton = QPushButton(self.centralwidget)\\n
        self.pushButton.setObjectName(u"pushButton")\\n
        self.pushButton.setGeometry(QRect(474, 230, 91, 23))\\n
        self.pushButton_2 = QPushButton(self.centralwidget)\\n
        self.pushButton_2.setObjectName(u"pushButton_2")\\n
        self.pushButton_2.setGeometry(QRect(374, 230, 91, 23))\\n
        EnglishWindow.setCentralWidget(self.centralwidget)\\n
        self.menubar = QMenuBar(EnglishWindow)\\n
        self.menubar.setObjectName(u"menubar")\\n
        self.menubar.setGeometry(QRect(0, 0, 680, 23))\\n
        EnglishWindow.setMenuBar(self.menubar)\\n
        self.statusbar = QStatusBar(EnglishWindow)\\n
        self.statusbar.setObjectName(u"statusbar")\\n
        EnglishWindow.setStatusBar(self.statusbar)\\n
        self.retranslateUi(EnglishWindow)\\n
        QMetaObject.connectSlotsByName(EnglishWindow)\\n
    # setupUi\\n
    def retranslateUi(self, EnglishWindow):\\n
        EnglishWindow.setWindowTitle(QCoreApplication.translate("EnglishWindow", u"WPFormatter 1.0 Community", None))\\n
        self.groupBox_src.setTitle(QCoreApplication.translate("EnglishWindow", u"\u6e90\u6587\u4ef6", None))\\n
        self.label.setText(QCoreApplication.translate("EnglishWindow", u"\u6e90\u6587\u4ef6\u8def\u5f84:", None))\\n
        self.pushButton_src_browse.setText("")\\n
        self.label_2.setText(QCoreApplication.translate("EnglishWindow", u"\u6e90\u6587\u4ef6\u7c7b\u578b:", None))\\n
        self.comboBox_src_type.setItemText(0, QCoreApplication.translate("EnglishWindow", u"Office Word \u6587\u6863 (.doc, .docx, .docm)", None))\\n
        self.comboBox_src_type.setItemText(1, QCoreApplication.translate("EnglishWindow", u"PDF \u6587\u6863 (.pdf)", None))\\n
        self.groupBox_dst.setTitle(QCoreApplication.translate("EnglishWindow", u"\u76ee\u6807\u6587\u4ef6", None))\\n
        self.comboBox_dst_type.setItemText(0, QCoreApplication.translate("EnglishWindow", u"PDF \u6587\u6863 (.pdf)", None))\\n
        self.comboBox_dst_type.setItemText(1, QCoreApplication.translate("EnglishWindow", u"Office Word \u6587\u6863 (.doc, .docx, .docm)", None))\\n
        self.label_3.setText(QCoreApplication.translate("EnglishWindow", u"\u76ee\u6807\u6587\u4ef6\u8def\u5f84:", None))\\n
        self.label_4.setText(QCoreApplication.translate("EnglishWindow", u"\u76ee\u6807\u6587\u4ef6\u7c7b\u578b:", None))\\n
        self.pushButton_dst_browse.setText("")\\n
        self.pushButton_exchange.setText(QCoreApplication.translate("EnglishWindow", u"\u8f6c\u6362", None))\\n
        self.pushButton.setText(QCoreApplication.translate("EnglishWindow", u"\u4e0a\u4e00\u6b65", None))\\n
        self.pushButton_2.setText(QCoreApplication.translate("EnglishWindow", u"\u53d6\u6d88", None))\\n
    # retranslateUi\\n
